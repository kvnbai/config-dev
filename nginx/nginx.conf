#
# sudo ln -s /etc/nginx/sites-available /etc/nginx/sites-enabled
#
# https://www.nginx.com/blog/using-nginx-plus-with-selinux/
#
# Syntax:  user user [group];
# Default: user nobody nobody;
# Context: main
#
# Defines user and group credentials used by worker processes. If group is
# omitted, a group whose name equals that of user is used.
user nginx;

# Syntax:  worker_processes number | auto;
# Default: worker_processes 1;
# Context: main
#
# Defines the number of worker processes.
#
# The optimal value depends on many factors including (but not limited
# to) the number of CPU cores, the number of hard disk drives that store
# data, and load pattern. When one is in doubt, setting it to the number
# of available CPU cores would be a good start (the value “auto” will
# try to autodetect it).
worker_processes  auto;

# Syntax:  error_log file [level];
# Default: error_log logs/error.log error;
# Context: main, http, mail, stream, server, location
#
# Configures logging. Several logs can be specified on the same level.
#
# If on the main configuration level writing a log to a file is not explicitly
# defined, the default file will be used.
#
# The first parameter defines a file that will store the log.
#
# The second parameter determines the level of logging, and can be one of the
# following: debug, info, notice, warn, error, crit, alert, or emerg. Log levels
# above are listed in the order of increasing severity. Setting a certain log
# level will cause all messages of the specified and more severe log levels to
# be logged.
error_log /var/log/nginx/error.log warn;

# Syntax:  pid file;
# Default: pid logs/nginx.pid;
# Context: main

# Defines a file that will store the process ID of the main process.
pid /run/nginx.pid;

# Syntax:  worker_rlimit_nofile number;
# Default: —
# Context: main
#
# Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for
# worker processes. Used to increase the limit without restarting the main
# process.
worker_rlimit_nofile 65535;

include /usr/share/nginx/modules/*.conf;

# Provides the configuration file context in which the directives that affect
# connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be
    # opened by a worker process.
    #
    # It should be kept in mind that this number includes all connections
    # (e.g. connections with proxied servers, among others), not only
    # connections with clients. Another consideration is that the actual
    # number of simultaneous connections cannot exceed the current limit
    # on the maximum number of open files, which can be changed by
    # worker_rlimit_nofile.
    #
    # Serve up to 768 client per 1 process:
    worker_connections 768;
}

http {
    # Syntax: sendfile on | off;
    # Default: sendfile off;
    # Context: http, server, location, if in location
    #
    # Enabling the sendfile directive eliminates the step of copying the
    # data into the buffer and enables direct copying data from one file
    # descriptor to another.
    sendfile on;

    # Syntax:  tcp_nopush on | off;
    # Default: tcp_nopush off;
    # Context: http, server, location
    #
    # Use the tcp_nopush directive together with the sendfile on;directive.
    # This enables NGINX to send HTTP response headers in one packet right
    # after the chunk of data has been obtained by sendfile().
    tcp_nopush on;

    # Syntax:  tcp_nodelay on | off;
    # Default: tcp_nodelay on;
    # Context: http, server, location
    #
    # Allows override of Nagle’s algorithm, originally designed to solve
    # problems with small packets in slow networks. The algorithm
    # consolidates a number of small packets into a larger one and sends
    # the packet with a 200 ms delay. Nowadays, when serving large static
    # files, the data can be sent immediately regardless of the packet
    # size. The delay also affects online applications (ssh, online games,
    # online trading, and so on). By default, the tcp_nodelay directive
    # is set to on which means that the Nagle’s algorithm is disabled.
    # Use this directive only for keepalive connections.
    #
    # Additionally, it is enabled on SSL connections, for unbuffered
    # proxying, and for WebSocket proxying.
    tcp_nodelay on;

    # Syntax:  keepalive_timeout timeout [header_timeout];
    # Default: keepalive_timeout 75s;
    # Context: http, server, location
    #
    # The first parameter sets a timeout during which a keep-alive client
    # connection will stay open on the server side. The zero value disables
    # keep-alive client connections. The optional second parameter sets a
    # value in the “Keep-Alive: timeout=time” response header field.
    # Two parameters may differ.
    keepalive_timeout 65;

    # Syntax:  server_tokens on | off | build | string;
    # Default: server_tokens on;
    # Context: http, server, location
    #
    # Enables or disables emitting nginx version on error pages and in the
    # “Server” response header field.
    #
    # The build parameter (1.11.10) enables emitting a build name along
    # with nginx version.
    # server_tokens on;

    # NOTES on hashes:
    # To quickly process static sets of data such as server names, map
    # directive’s values, MIME types, names of request header strings,
    # nginx uses hash tables.
    #
    # The hash bucket size parameter is aligned to the size that is a
    # multiple of the processor’s cache line size. This speeds up key
    # search in a hash on modern processors by reducing the number of
    # memory accesses. If hash bucket size is equal to one processor’s
    # cache line size then the number of memory accesses during the key
    # search will be two in the worst case — first to compute the bucket
    # address, and second during the key search inside the bucket.
    # Therefore, if nginx emits the message requesting to increase either
    # hash max size or hash bucket size then the first parameter should
    # first be increased.

    # Syntax:  types_hash_max_size size;
    # Default: types_hash_max_size 1024;
    # Context: http, server, location
    #
    # Sets the maximum size of the types hash tables.
    types_hash_max_size 4096;

    # Syntax:  server_names_hash_bucket_size size;
    # Default: server_names_hash_bucket_size 32|64|128;
    # Context: http
    #
    # Sets the bucket size for the server names hash tables.
    server_names_hash_bucket_size 64;

    # Syntax:  server_names_hash_max_size size;
    # Default: server_names_hash_max_size 512;
    # Context: http
    # Sets the maximum size of the server names hash tables.
    server_names_hash_max_size 1024;

    # Syntax:  server_name_in_redirect on | off;
    # Default: server_name_in_redirect off;
    # Context: http, server, location
    #
    # Enables or disables the use of the primary server name, specified by
    # the server_name directive, in absolute redirects issued by nginx. When
    # the use of the primary server name is disabled, the name from the
    # “Host” request header field is used. If this field is not present,
    # the IP address of the server is used.
    # server_name_in_redirect off;

    # Syntax:  include file | mask;
    # Default: —
    # Context: any
    #
    # Includes another file, or files matching the specified mask, into
    # configuration. Included files should consist of syntactically correct
    # directives and blocks
    #
    # Include /etc/nginx/mime.types.
    include /etc/nginx/mime.types;

    # Syntax:  default_type mime-type;
    # Default: default_type text/plain;
    # Context: http, server, location
    #
    # Defines the default MIME type of a response. Mapping of file name
    # extensions to MIME types can be set with the types directive.
    #
    # A MIME attachment with the content type "application/octet-stream"
    # is a binary file. Typically, it will be an application or a document
    # that must be opened in an application, such as a spreadsheet or word
    # processor. If the attachment has a filename extension associated with
    # it, you may be able to tell what kind of file it is. A .exe extension,
    # for example, indicates it is a Windows or DOS program (executable),
    # while a file ending in .doc is probably meant to be opened in Microsoft
    # Word.
    default_type application/octet-stream;

    # Syntax:  ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];
    # Default: ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # Context: http, server
    #
    # Enables the specified protocols.
    #
    # The TLSv1.1 and TLSv1.2 parameters (1.1.13, 1.0.12) work only when
    # OpenSSL 1.0.1 or higher is used.
    # The TLSv1.3 parameter (1.13.0) works only when OpenSSL 1.1.1 built
    # with TLSv1.3 support is used.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE

    # Syntax:  ssl_prefer_server_ciphers on | off;
    # Default: ssl_prefer_server_ciphers off;
    # Context: http, server
    #
    # Specifies that server ciphers should be preferred over client ciphers
    # when using the SSLv3 and TLS protocols.
    ssl_prefer_server_ciphers on;

    # Syntax:  log_format name [escape=default|json|none] string ...;
    # Default: log_format combined "...";
    # Context: http
    # Specifies log format.
    #
    # The escape parameter allows setting json or default characters escaping
    # in variables, by default, default escaping is used. The none value
    # disables escaping.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
           '$status $body_bytes_sent "$http_referer" '
           '"$http_user_agent" "$http_x_forwarded_for"';

    # Syntax:  access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];
    #          access_log off;
    # Default: access_log logs/access.log combined;
    # Context: http, server, location, if in location, limit_except
    #
    # Sets the path, format, and configuration for a buffered log write.
    # Several logs can be specified on the same level. Logging to syslog
    # can be configured by specifying the “syslog:” prefix in the first
    # parameter. The special value off cancels all access_log directives 
    # on the current level. If the format is not specified then the
    # predefined “combined” format is used.
    access_log /var/log/nginx/access.log;

    # Syntax:  error_log file [level];
    # Default: error_log logs/error.log error;
    # Context: main, http, mail, stream, server, location
    #
    # Configures logging. Several logs can be specified on the same level.
    #
    # If on the main configuration level writing a log to a file is not
    # explicitly defined, the default file will be used.
    #
    # The first parameter defines a file that will store the log.
    #
    # The second parameter determines the level of logging, and can be one
    # of the following: debug, info, notice, warn, error, crit, alert, or
    # emerg. Log levels above are listed in the order of increasing severity.
    # Setting a certain log level will cause all messages of the specified
    # and more severe log levels to be logged.
    error_log /var/log/nginx/error.log;

    # Syntax:  gzip on | off;
    # Default: gzip off;
    # Context: http, server, location, if in location
    #
    # Enables or disables gzipping of responses. GZip is a form of data
    # compression -- ie it takes a chunk of data and makes it smaller.
    # The original data can be restored by un-zipping the compressed file.
    # This means that when it is in use, your bandwidth costs for serving
    # the site will be lower because people visiting the site will be
    # downloading smaller files.
    gzip on;

    # Syntax:  gzip_vary on | off;
    # Default: gzip_vary off;
    # Context: http, server, location
    # Enables or disables inserting the “Vary: Accept-Encoding” response
    # header field if the directives gzip, gzip_static, or gunzip are active.
    # gzip_vary on;

    # Syntax:  gzip_comp_level level;
    # Default: gzip_comp_level 1;
    # Context: http, server, location
    #
    # Sets a gzip compression level of a response. Acceptable values are
    # in the range from 1 to 9. The level of gzip compression simply
    # determines how compressed the data is on a scale from 1-9, where 9
    # is the most compressed. The trade-off is that the most compressed
    # data usually requires the most work to compress/decompress, so if
    # you have it set fairly high on a high-volume website, you may feel
    # its effect.
    gzip_comp_level 6;

    # Syntax:  gzip_buffers number size;
    # Default: gzip_buffers 32 4k|16 8k;
    # Context: http, server, location
    # 
    # Sets the number and size of buffers used to compress a response.
    # By default, the buffer size is equal to one memory page. This is
    # either 4K or 8K, depending on a platform.
    gzip_buffers 16 8k;

    # Syntax:  gzip_http_version 1.0 | 1.1;
    # Default: gzip_http_version 1.1;
    # Context: http, server, location
    #
    # gzip_http_version can have HTTP 1.0 but the caveat is when HTTP
    # version 1.0 is used, the Vary: Accept-Encoding header is not set. 
    # As this can lead to proxy cache corruption, consider adding it with
    # add_header. Also note that the Content-Length header is not set when
    # using either version. Keepalives will therefore be impossible with
    # version 1.0, while for 1.1 it is handled by chunked transfers.  
    gzip_http_version 1.1;

    # Syntax:  gzip_min_length length;
    # Default: gzip_min_length 20;
    # Context: http, server, location
    #
    # Sets the minimum length of a response that will be gzipped. The length
    # is determined only from the “Content-Length” response header field.
    gzip_min_length 256;

    # Syntax:  gzip_types mime-type ...;
    # Default: gzip_types text/html;
    # Context: http, server, location
    # Enables gzipping of responses for the specified MIME types in addition
    # to “text/html”. The special value “*” matches any MIME type. Responses
    # with the “text/html” type are always compressed.
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Virtual Host Configs
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;


    server {
        listen     80 default_server;
        listen     [::]:80 default_server;
        server_name _;
        root       /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
        }

        error_page 404 /404.html;
        location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }
    }

    server {
        listen      443 ssl http2 default_server;
        listen      [::]:443 ssl http2 default_server;
        server_name _;
        root        /usr/share/nginx/html;

        # Context: httpd_sys_content_t
        ssl_certificate /var/www/workspace/config-desktop/dev/certificate/www.localhost.com.crt;
        ssl_certificate_key /var/www/workspace/config-desktop/dev/certificate/www.localhost.com.key;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 10m;
        ssl_ciphers PROFILE=SYSTEM;
        ssl_prefer_server_ciphers on;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
        }

        error_page 404 /404.html;
        location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }
    }
}


# mail {
#       # See sample authentication script at:
#       # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#       # auth_http localhost/auth.php;
#       # pop3_capabilities "TOP" "USER";
#       # imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#       server {
#               listen     localhost:110;
#               protocol   pop3;
#               proxy      on;
#       }
#
#       server {
#               listen     localhost:143;
#               protocol   imap;
#               proxy      on;
#       }
# }
